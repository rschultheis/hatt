#!/usr/bin/env ruby
require 'optparse'

require_relative '../lib/hatt'

Log = Hatt::Log

Log.level = Logger::INFO

# Deal with the cmd line
def parse_cmd_line
  options = {
    files: [],
    config_file: 'hatt.yml',
    authenticate: true,
    repl: false,
    # by leaving environment unset, hatt will use HATT_ENVIRONMENT variable if no -e is used on cmd line
    # environment: nil,
  }

  optparse = OptionParser.new do |opts|
    opts.banner = %(
      HATT HTTP API Test Tool command line utility:
      example, run a data script: bin/hatt -f script.rb
      example, call a dsl method:     bin/hatt <hatt dsl method name>

    )

    opts.on('-f', '--script=FILENAME',
            'specify a script file to run') { |file| options[:files] << file }

    opts.on('-d', '--script-dir=dir',
            'specify a directory of hatt scripts, run all of them') { |dir| options[:files] += Dir["#{dir}/**/*.rb"] }

    opts.on('-v', '--verbose',
            'debug logging, see every request and response in detail') { Log.level = Logger::DEBUG }

    opts.on('-q', '--quiet',
            'quiet logging, warnings and errors only') { Log.level = Logger::WARN }

    opts.on('-c', '--config=FILENAME',
            'config filename') { |fn| options[:config_file] = fn }

    opts.on('-e', '--environment=ENVIRONMENT',
            'environment name') { |e| options[:environment] = e.to_sym }

    opts.on('-n', '--no-authenticate',
            'Do not authenticate') { options[:authenticate] = false }

    opts.on('-l', '--list', 'Print each available hatt dsl method') do
      options[:list_hatt_methods] = true
      options[:authenticate] = false # no point in authenticating for --list
    end

    opts.on('-r', '--pry-repl', 'Launch an interactice repl with full access to hatt services and dsl') do
      options[:repl] = true
    end
  end
  optparse.parse!
  options
end
options = parse_cmd_line

begin
  hatt = Hatt.new options
rescue TCFG::NoSuchConfigFileError => e
  Log.error e.message
  Log.error <<-MSG
  \n
  Either use -c to specify the location of your hatt config file,
  or create a file called hatt.yml in the current directory.

  Review documentation on configuration here: <TODO>
  MSG
  Kernel.abort
end

if options[:list_hatt_methods]
  puts 'HATT method listing'

  hatt.singleton_methods.sort.each do |meth|
    puts " - #{meth}(#{hatt.method(meth).parameters.join(', ')})"
  end

  exit
end

if !ARGV.empty?
  # a hatt method has been specified on the command line
  method = ARGV.shift
  response = hatt.send(method.to_sym, *ARGV)
  Log.debug "HATT method '#{method}' returned:\n" + response.inspect
  puts response

elsif !options[:files].empty?
  # some hatt files were specified on the command line
  options[:files].each do |script_file|
    response = hatt.run_script_file(script_file)
    Log.debug "HATT script '#{script_file}' returtned: #{response.inspect}"
    puts response
  end

elsif options[:repl]
  Log.debug 'Launching PRY REPL since --pry-repl was specified....'
  hatt.launch_pry_repl
else
  Kernel.abort 'Nothing to do?  use -f or give a method name on the cmd line'
end
